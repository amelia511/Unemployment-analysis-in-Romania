# -*- coding: utf-8 -*-
"""Unemployment analysis project_ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dSNkMWbLl8F2mFeJsxVs7dmVRo8Q9YQq

### ***Research Methods project- Unemployment analysis - IMBA Year 2**

*   Georgescu Sunita-Maria
*   Nistor Amelia

*   Vuc Daria

The project anaysis the unemployment in Romania between the years 1992 to 2022.


Our Dependent variable (y) is Unemployment rate .

Our independent variables (x) are

1.   Foreign direct investment

1.   Interest rate

1.   Government Expenditure
2.   Population Growth

**Import Libraries**
"""

import pandas as pd
import numpy as np

"""**Import Dataset**"""

data_df=pd.read_csv('/content/drive/MyDrive/UnemploymentandVariablesDatasetFinal.csv')

data_df.head()

"""**Correlation index**"""

corrolation_list = ['Foreign direct investment', 'Government Expenditure','Interest rate','Population Growth','Unemployment rate']
up_data = data_df[corrolation_list].corr()
display(up_data)

"""**Correlation Heatmap Display**"""

import seaborn as sns
import matplotlib.pyplot as plt

# to help you visualize these correlations, see the plots below
# the lighter the colour the higher the correlation

plt.rcParams.update({'font.size': 20})
plt.figure(figsize=(20,20))
sns.heatmap(up_data, annot=True);

"""This is the pearson correlation values: 1 = a strong positive correlation 0 = no correlation -1 = strong negative correlation.

**Multiple Regression Analysis**

**Define X and Y**
"""

x=data_df.drop(['Unemployment rate'], axis=1).values
y=data_df ['Unemployment rate'].values

print(x)

print(y)

"""**Split the dataset in training set and test set**"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.3,random_state=0)

"""**Train the model on the training set**"""

from sklearn.linear_model import LinearRegression
ml=LinearRegression()
ml.fit(x_train,y_train)

"""**Predict the test set results**"""

y_pred=ml.predict(x_test)
print(y_pred)

ml.predict([[ 0.306508 ,3587916667	,211.205588, -0.903463]])

"""**Evaluate the model**"""

from sklearn.metrics import r2_score
r2_score(y_test,y_pred)

"""**Plot the results**"""

import matplotlib.pyplot as plt
plt.figure(figsize=(10,5))
plt.scatter(y_test,y_pred)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs. Predicted')

"""**Predicted values**"""

pred_y_df=pd.DataFrame({'Actual Value':y_test,'Predicted value':y_pred,'Difference': y_test-y_pred})
pred_y_df[0:30]